# -*- coding: utf-8 -*-
"""Notebook Expense Tracker

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/164p-eQLa1DUsVTeYlHyGgDqHSt5ans2S
"""

# Jupyter Notebook Expense Tracker
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, date
import warnings
warnings.filterwarnings('ignore')

plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class ExpenseTracker:
    def __init__(self):
        # Initialize with sample data
        self.expenses = pd.DataFrame({
            'Date': pd.to_datetime([
                '2024-01-15', '2024-01-20', '2024-01-25',
                '2024-02-05', '2024-02-12', '2024-02-18',
                '2024-03-03', '2024-03-10', '2024-03-22'
            ]),
            'Category': [
                'Food', 'Transportation', 'Entertainment',
                'Food', 'Utilities', 'Shopping',
                'Food', 'Transportation', 'Healthcare'
            ],
            'Amount': [45.50, 25.00, 80.00, 32.75, 120.00, 65.30, 28.90, 30.00, 150.00],
            'Description': [
                'Grocery shopping', 'Auto fare', 'Movie tickets',
                'Restaurant dinner', 'Electricity bill', 'Clothing',
                'Coffee and snacks', 'Gas', 'Doctor visit'
            ]
        })

    def add_expense(self, date_str, category, amount, description):
        """Add a new expense"""
        new_expense = pd.DataFrame({
            'Date': [pd.to_datetime(date_str)],
            'Category': [category],
            'Amount': [amount],
            'Description': [description]
        })
        self.expenses = pd.concat([self.expenses, new_expense], ignore_index=True)
        print(f"âœ… Added expense: ${amount:.2f} for {description}")

    def calculate_kpis(self):
        """Calculate and display KPIs"""
        if self.expenses.empty:
            return

        total_spent = self.expenses['Amount'].sum()
        top_category = self.expenses.groupby('Category')['Amount'].sum().idxmax()
        max_transaction = self.expenses['Amount'].max()
        avg_transaction = self.expenses['Amount'].mean()
        transaction_count = len(self.expenses)

        print(" KEY PERFORMANCE INDICATORS")
        print("=" * 40)
        print(f" Total Spent: ${total_spent:,.2f}")
        print(f" Top Category: {top_category}")
        print(f" Max Transaction: ${max_transaction:,.2f}")
        print(f" Average Transaction: ${avg_transaction:,.2f}")
        print(f" Total Transactions: {transaction_count}")
        print("=" * 40)

    def show_expense_table(self, n_rows=10):
        """Display recent expenses table"""
        print(f"\n RECENT EXPENSES (Last {n_rows})")
        print("=" * 60)

        # Sort by date descending
        recent = self.expenses.sort_values('Date', ascending=False).head(n_rows)

        # Format for display
        display_df = recent.copy()
        display_df['Date'] = display_df['Date'].dt.strftime('%Y-%m-%d')
        display_df['Amount'] = display_df['Amount'].apply(lambda x: f"${x:.2f}")

        print(display_df.to_string(index=False))

    def create_visualizations(self):
        """Create all visualizations"""
        if self.expenses.empty:
            print("No data to visualize")
            return

        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle(' Personal Expense Dashboard', fontsize=16, fontweight='bold')

        # 1. Monthly spending trends
        monthly_data = self.expenses.copy()
        monthly_data['Month'] = monthly_data['Date'].dt.to_period('M')
        monthly_totals = monthly_data.groupby('Month')['Amount'].sum()

        monthly_totals.plot(kind='bar', ax=ax1, color='skyblue')
        ax1.set_title(' Monthly Spending Trends')
        ax1.set_xlabel('Month')
        ax1.set_ylabel('Amount ($)')
        ax1.tick_params(axis='x', rotation=45)

        # 2. Category pie chart
        category_totals = self.expenses.groupby('Category')['Amount'].sum()
        ax2.pie(category_totals.values, labels=category_totals.index, autopct='%1.1f%%')
        ax2.set_title(' Expenses by Category')

        # 3. Daily spending trend
        daily_spending = self.expenses.groupby('Date')['Amount'].sum()
        daily_spending.plot(kind='line', ax=ax3, marker='o', color='green')
        ax3.set_title(' Daily Spending Trend')
        ax3.set_xlabel('Date')
        ax3.set_ylabel('Amount ($)')
        ax3.tick_params(axis='x', rotation=45)

        # 4. Category comparison (bar chart)
        category_totals.plot(kind='bar', ax=ax4, color='coral')
        ax4.set_title(' Spending by Category')
        ax4.set_xlabel('Category')
        ax4.set_ylabel('Amount ($)')
        ax4.tick_params(axis='x', rotation=45)

        plt.tight_layout()
        plt.show()

    def get_insights(self):
        """Generate spending insights"""
        if self.expenses.empty or len(self.expenses) < 2:
            print("Not enough data for insights")
            return

        print("\nðŸ’¡ SPENDING INSIGHTS")
        print("=" * 40)

        # Top spending days
        daily_spending = self.expenses.groupby('Date')['Amount'].sum().sort_values(ascending=False)
        print(" Top Spending Days:")
        for i, (date, amount) in enumerate(daily_spending.head(3).items(), 1):
            print(f"  {i}. {date.strftime('%Y-%m-%d')}: ${amount:.2f}")

        # Category analysis
        category_stats = self.expenses.groupby('Category')['Amount'].agg(['sum', 'count', 'mean']).round(2)
        category_stats = category_stats.sort_values('sum', ascending=False)

        print("\n Category Analysis:")
        for i, (category, stats) in enumerate(category_stats.head(3).iterrows(), 1):
            print(f"  {i}. {category}: ${stats['sum']:.2f} ({int(stats['count'])} transactions, avg: ${stats['mean']:.2f})")

        # Spending patterns
        print(f"\n Date Range: {self.expenses['Date'].min().strftime('%Y-%m-%d')} to {self.expenses['Date'].max().strftime('%Y-%m-%d')}")

        # Weekly average
        days_range = (self.expenses['Date'].max() - self.expenses['Date'].min()).days
        if days_range > 0:
            weekly_avg = (self.expenses['Amount'].sum() / days_range) * 7
            print(f" Average Weekly Spending: ${weekly_avg:.2f}")

    def filter_expenses(self, category=None, start_date=None, end_date=None):
        """Filter expenses and show results"""
        filtered_df = self.expenses.copy()

        if category:
            filtered_df = filtered_df[filtered_df['Category'] == category]

        if start_date:
            filtered_df = filtered_df[filtered_df['Date'] >= pd.to_datetime(start_date)]

        if end_date:
            filtered_df = filtered_df[filtered_df['Date'] <= pd.to_datetime(end_date)]

        print(f"\n FILTERED RESULTS")
        print("=" * 30)
        print(f"Transactions found: {len(filtered_df)}")
        print(f"Total amount: ${filtered_df['Amount'].sum():.2f}")

        if not filtered_df.empty:
            print("\nFiltered expenses:")
            display_df = filtered_df.copy()
            display_df['Date'] = display_df['Date'].dt.strftime('%Y-%m-%d')
            display_df['Amount'] = display_df['Amount'].apply(lambda x: f"${x:.2f}")
            print(display_df.to_string(index=False))

        return filtered_df

    def show_dashboard(self):
        """Display complete dashboard"""
        print(" EXPENSE TRACKER DASHBOARD")
        print("=" * 50)

        self.calculate_kpis()
        self.show_expense_table()
        self.create_visualizations()
        self.get_insights()

# Initialize the expense tracker
tracker = ExpenseTracker()

# Display the dashboard
tracker.show_dashboard()

print("\n" + "="*50)
print(" HOW TO USE:")
print("="*50)
print("# Add a new expense:")
print("tracker.add_expense('2024-03-25', 'Food', 25.50, 'Lunch at cafe')")
print()
print("# Filter expenses:")
print("tracker.filter_expenses(category='Food')")
print("tracker.filter_expenses(start_date='2024-02-01', end_date='2024-02-28')")
print()
print("# Refresh dashboard:")
print("tracker.show_dashboard()")
print("="*50)
